name: Release

on:
  push:
    branches:
      - staging
    tags:
      - 'v*.*.*'
  workflow_dispatch:
env:
  GO_VERSION: "1.24.x"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release-image:
    runs-on: [self-hosted, staging, default]

    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-tags: true
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.AWS_ECR_MASTER_ACCOUNT }}.dkr.ecr.${{ vars.AWS_ECR_MASTER_REGION }}.amazonaws.com
          username: ${{ secrets.AWS_ECR_MASTER_ACCESS_KEY }}
          password: ${{ secrets.AWS_ECR_MASTER_SECRET_ACCESS_KEY }}

      - run: docker context create builders
      - uses: docker/setup-buildx-action@v3
        with:
          version: latest
          endpoint: builders
          driver-opts: |
            image=${{ vars.AWS_ECR_MASTER_ACCOUNT }}.dkr.ecr.${{ vars.AWS_ECR_MASTER_REGION }}.amazonaws.com/proxy/moby/buildkit:buildx-stable-1

      - name: Checkout Teamwork Central Build Actions
        uses: actions/checkout@v5
        with:
          repository: Teamwork/gha-builds
          ref: main
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          path: .github/actions/build
          persist-credentials: false

      - name: Go Build
        uses: ./.github/actions/build/go/default
        with:
          GITHUB_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
          ECR_ACCOUNT: ${{ vars.AWS_ECR_MASTER_ACCOUNT }}
          ECR_REGION: ${{ vars.AWS_ECR_MASTER_REGION }}
          ECR_ACCESS_KEY: ${{ secrets.AWS_ECR_MASTER_ACCESS_KEY }}
          ECR_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_MASTER_SECRET_ACCESS_KEY }}
          IMAGE_REPO_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE_REPO_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
          IMAGE_NAME: "mcp"
          HELM_CHART_PATH: "chart"
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          PUSH_PROD: true
          PUSH_DEV_ENV: false
          UPDATE_HELM_CHART: true
          NPM_TOKEN: false

  release-binaries:
    runs-on: [self-hosted, staging, default]
    needs: release-image
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-tags: true
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Version
        id: version
        run: |
          version="${GITHUB_REF#refs/tags/}"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Previous Tag
        id: previous-tag
        run: |
          tag=$(git describe --tags --abbrev=0 "${GITHUB_REF}^")
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Go Build
        run: |
          version="${{ steps.version.outputs.version }}"

          mkdir -p releases
          GOOS=linux GOARCH=amd64 go build -ldflags="-X 'github.com/teamwork/mcp/internal/config.Version=$version'" -o releases/tw-mcp-linux-amd64 ./cmd/mcp-stdio
          GOOS=linux GOARCH=arm64 go build -ldflags="-X 'github.com/teamwork/mcp/internal/config.Version=$version'" -o releases/tw-mcp-linux-arm64 ./cmd/mcp-stdio
          GOOS=darwin GOARCH=amd64 go build -ldflags="-X 'github.com/teamwork/mcp/internal/config.Version=$version'" -o releases/tw-mcp-darwin-amd64 ./cmd/mcp-stdio
          GOOS=darwin GOARCH=arm64 go build -ldflags="-X 'github.com/teamwork/mcp/internal/config.Version=$version'" -o releases/tw-mcp-darwin-arm64 ./cmd/mcp-stdio
          GOOS=windows GOARCH=amd64 go build -ldflags="-X 'github.com/teamwork/mcp/internal/config.Version=$version'" -o releases/tw-mcp-windows-amd64.exe ./cmd/mcp-stdio

      # https://github.com/cli/cli/blob/trunk/docs/install_linux.md#debian-ubuntu-linux-raspberry-pi-os-apt
      - name: Install GitHub CLI
        run: |
          (type -p wget >/dev/null || (sudo apt update && sudo apt install wget -y)) \
            && sudo mkdir -p -m 755 /etc/apt/keyrings \
            && out=$(mktemp) && wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg \
            && cat $out | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
            && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
            && sudo mkdir -p -m 755 /etc/apt/sources.list.d \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y

      - name: Create Release
        run: |
          version="${{ steps.version.outputs.version }}"
          gh release create $version \
            --fail-on-no-commits \
            --generate-notes \
            --notes-start-tag ${{ steps.previous-tag.outputs.tag }} \
            --verify-tag \
            releases/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}