name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
env:
  GO_VERSION: "1.24.x"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release-image:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Version
        id: version
        run: |
          version="${GITHUB_REF#refs/tags/}"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: "ghcr.io"
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: docker context create builders

      - uses: docker/setup-buildx-action@v3
        with:
          version: latest
          endpoint: builders

      - name: Image Release
        run: make push-stdio VERSION=${{ steps.version.outputs.version }}

  build-binaries:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Version
        id: version
        run: |
          version="${GITHUB_REF#refs/tags/}"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Go Build
        run: |
          mkdir -p releases
          version="${{ steps.version.outputs.version }}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-X 'github.com/teamwork/mcp/internal/config.Version=$version'" -o releases/tw-mcp-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/mcp-stdio

      - name: Upload binaries artifact
        uses: actions/upload-artifact@v4
        with:
          name: mcp-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: releases/tw-mcp-${{ matrix.goos }}-${{ matrix.goarch }}

  release-binaries:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: ["build-binaries"]

    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-tags: true
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Download all binaries artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: mcp-binaries-*
          path: releases
          merge-multiple: true

      - name: Version
        id: version
        run: |
          version="${GITHUB_REF#refs/tags/}"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Previous Tag
        id: previous-tag
        run: |
          current_tag="${GITHUB_REF#refs/tags/}"
          tag=$(git tag --sort=-version:refname | grep -A1 "^${current_tag}$" | tail -n1 || echo "")
          if [ "$tag" = "$current_tag" ]; then
            tag=""
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Create Release
        run: |
          version="${{ steps.version.outputs.version }}"
          gh release create $version \
            --fail-on-no-commits \
            --generate-notes \
            ${{ steps.previous-tag.outputs.tag != '' && format('--notes-start-tag {0}', steps.previous-tag.outputs.tag) || '' }} \
            --verify-tag \
            releases/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
